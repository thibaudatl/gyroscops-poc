<?php

declare(strict_types=1);

namespace Kiboko\Component\Satellite\Plugin\FTP;

use Kiboko\Contract\Configurator\PluginConfigurationInterface;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;

use function Kiboko\Component\SatelliteToolbox\Configuration\asExpression;
use function Kiboko\Component\SatelliteToolbox\Configuration\isExpression;

final class Configuration implements PluginConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $builder = new TreeBuilder('ftp');

        /* @phpstan-ignore-next-line */
        $builder->getRootNode()
            ->children()
                ->arrayNode('expression_language')
                    ->scalarPrototype()->end()
                ->end()
                ->arrayNode('loader')
                    ->children()
                        ->arrayNode('servers')
                            ->arrayPrototype()
                                ->children()
                                    ->scalarNode('host')
                                        ->isRequired()
                                        ->cannotBeEmpty()
                                        ->validate()
                                            ->ifTrue(isExpression())
                                            ->then(asExpression())
                                        ->end()
                                    ->end()
                                    ->variableNode('port')
                                        ->defaultValue(21)
                                        ->validate()
                                            ->ifTrue(fn ($data) => !str_starts_with((string) $data, '@='))
                                            ->then(fn ($data) => (int) $data)
                                        ->end()
                                        ->validate()
                                            ->ifTrue(isExpression())
                                            ->then(asExpression())
                                        ->end()
                                    ->end()
                                    ->integerNode('timeout')
                                        ->defaultValue(90)
                                        ->validate()
                                            ->ifTrue(isExpression())
                                            ->then(asExpression())
                                        ->end()
                                    ->end()
                                    ->scalarNode('username')
                                        ->cannotBeEmpty()
                                        ->validate()
                                            ->ifTrue(isExpression())
                                            ->then(asExpression())
                                        ->end()
                                    ->end()
                                    ->scalarNode('password')
                                        ->cannotBeEmpty()
                                        ->validate()
                                            ->ifTrue(isExpression())
                                            ->then(asExpression())
                                        ->end()
                                    ->end()
                                    ->scalarNode('base_path')
                                        ->cannotBeEmpty()
                                        ->validate()
                                            ->ifTrue(isExpression())
                                            ->then(asExpression())
                                        ->end()
                                    ->end()
                                    ->booleanNode('passif_mode')
                                        ->defaultTrue()
                                        ->validate()
                                            ->ifTrue(isExpression())
                                            ->then(asExpression())
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('put')
                            ->isRequired()
                            ->arrayPrototype()
                                ->children()
                                    ->scalarNode('path')
                                        ->isRequired()
                                        ->cannotBeEmpty()
                                        ->validate()
                                            ->ifTrue(isExpression())
                                            ->then(asExpression())
                                        ->end()
                                    ->end()
                                    ->scalarNode('content')
                                        ->isRequired()
                                        ->cannotBeEmpty()
                                        ->validate()
                                            ->ifTrue(isExpression())
                                            ->then(asExpression())
                                        ->end()
                                    ->end()
                                    ->scalarNode('mode')
                                        ->validate()
                                            ->ifTrue(isExpression())
                                            ->then(asExpression())
                                        ->end()
                                    ->end()
                                    ->scalarNode('if')
                                        ->validate()
                                            ->ifTrue(isExpression())
                                            ->then(asExpression())
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
        ;

        return $builder;
    }
}
