<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Gyroscops\Api;

class Client extends \Gyroscops\Api\Runtime\Client\Client
{
    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostForgotPasswordBadRequestException
     */
    public function postForgotPassword(?\stdClass $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostForgotPassword($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetForgotPasswordNotFoundException
     */
    public function getForgotPassword(string $token, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetForgotPassword($token), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostForgotPasswordTokenBadRequestException
     * @throws \Gyroscops\Api\Exception\PostForgotPasswordTokenNotFoundException
     */
    public function postForgotPasswordToken(string $token, ?\stdClass $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostForgotPasswordToken($token, $requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function meUserCollection(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\MeUserCollection(), $fetch);
    }

    /**
     * Removes the Offer resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeleteOfferItemNotFoundException
     */
    public function deleteOfferItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeleteOfferItem($id), $fetch);
    }

    /**
     * Retrieves a Offer resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Offer|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetOfferItemNotFoundException
     */
    public function getOfferItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetOfferItem($id), $fetch);
    }

    /**
     * Updates the Offer resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Offer|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PatchOfferItemBadRequestException
     * @throws \Gyroscops\Api\Exception\PatchOfferItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\PatchOfferItemNotFoundException
     */
    public function patchOfferItem(string $id, ?Model\Offer $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PatchOfferItem($id, $requestBody), $fetch);
    }

    /**
     * Replaces the Offer resource.
     *
     * @param string                                                           $id          Resource identifier
     * @param \Gyroscops\Api\Model\OfferJsonld|\Gyroscops\Api\Model\Offer|null $requestBody
     * @param string                                                           $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Offer|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PutOfferItemBadRequestException
     * @throws \Gyroscops\Api\Exception\PutOfferItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\PutOfferItemNotFoundException
     */
    public function putOfferItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PutOfferItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves a Offer resource.
     *
     * @param string $id              Offer identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Option[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiOffersOptionsGetSubresourceOfferSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiOffersOptionsGetSubresourceOfferSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves the collection of Offer resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Offer[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getOfferCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetOfferCollection($queryParameters), $fetch);
    }

    /**
     * Removes the Organization resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeleteOrganizationItemNotFoundException
     */
    public function deleteOrganizationItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeleteOrganizationItem($id), $fetch);
    }

    /**
     * Retrieves a Organization resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Organization|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetOrganizationItemNotFoundException
     */
    public function getOrganizationItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetOrganizationItem($id), $fetch);
    }

    /**
     * Updates the Organization resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Organization|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PatchOrganizationItemBadRequestException
     * @throws \Gyroscops\Api\Exception\PatchOrganizationItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\PatchOrganizationItemNotFoundException
     */
    public function patchOrganizationItem(string $id, ?Model\Organization $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PatchOrganizationItem($id, $requestBody), $fetch);
    }

    /**
     * Replaces the Organization resource.
     *
     * @param string                                                                         $id          Resource identifier
     * @param \Gyroscops\Api\Model\OrganizationJsonld|\Gyroscops\Api\Model\Organization|null $requestBody
     * @param string                                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Organization|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PutOrganizationItemBadRequestException
     * @throws \Gyroscops\Api\Exception\PutOrganizationItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\PutOrganizationItemNotFoundException
     */
    public function putOrganizationItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PutOrganizationItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves a Organization resource.
     *
     * @param string $id              Organization identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\UserAuthorization[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiOrganizationsAuthorizationsGetSubresourceOrganizationSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiOrganizationsAuthorizationsGetSubresourceOrganizationSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves a Organization resource.
     *
     * @param string $id              Organization identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiOrganizationsExternalCollaboratorsGetSubresourceOrganizationSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiOrganizationsExternalCollaboratorsGetSubresourceOrganizationSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves a Organization resource.
     *
     * @param string $id              Organization identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiOrganizationsUsersGetSubresourceOrganizationSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiOrganizationsUsersGetSubresourceOrganizationSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves a Organization resource.
     *
     * @param string $id              Organization identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Workspace[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiOrganizationsWorkspacesGetSubresourceOrganizationSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiOrganizationsWorkspacesGetSubresourceOrganizationSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves the collection of Organization resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Organization[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getOrganizationCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetOrganizationCollection($queryParameters), $fetch);
    }

    /**
     * Creates a Organization resource.
     *
     * @param \Gyroscops\Api\Model\OrganizationJsonld|\Gyroscops\Api\Model\Organization|null $requestBody
     * @param string                                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Organization|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostOrganizationCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostOrganizationCollectionUnprocessableEntityException
     */
    public function postOrganizationCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostOrganizationCollection($requestBody), $fetch);
    }

    /**
     * Removes the Subscription resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeleteSubscriptionItemNotFoundException
     */
    public function deleteSubscriptionItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeleteSubscriptionItem($id), $fetch);
    }

    /**
     * Retrieves a Subscription resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Subscription|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetSubscriptionItemNotFoundException
     */
    public function getSubscriptionItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetSubscriptionItem($id), $fetch);
    }

    /**
     * Updates the Subscription resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Subscription|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PatchSubscriptionItemBadRequestException
     * @throws \Gyroscops\Api\Exception\PatchSubscriptionItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\PatchSubscriptionItemNotFoundException
     */
    public function patchSubscriptionItem(string $id, ?Model\Subscription $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PatchSubscriptionItem($id, $requestBody), $fetch);
    }

    /**
     * Creates a Subscription resource.
     *
     * @param \Gyroscops\Api\Model\SubscriptionJsonld|\Gyroscops\Api\Model\Subscription|null $requestBody
     * @param string                                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Subscription|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostSubscriptionCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostSubscriptionCollectionUnprocessableEntityException
     */
    public function postSubscriptionCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostSubscriptionCollection($requestBody), $fetch);
    }

    /**
     * Replaces the Subscription resource.
     *
     * @param string                                                                         $id          Resource identifier
     * @param \Gyroscops\Api\Model\SubscriptionJsonld|\Gyroscops\Api\Model\Subscription|null $requestBody
     * @param string                                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Subscription|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PutSubscriptionItemBadRequestException
     * @throws \Gyroscops\Api\Exception\PutSubscriptionItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\PutSubscriptionItemNotFoundException
     */
    public function putSubscriptionItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PutSubscriptionItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves the collection of Subscription resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Subscription[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSubscriptionCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetSubscriptionCollection($queryParameters), $fetch);
    }

    /**
     * Retrieves a Subscription resource.
     *
     * @param string $id    Subscription identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Offer|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiSubscriptionsOfferGetSubresourceSubscriptionSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiSubscriptionsOfferGetSubresourceSubscriptionSubresource($id), $fetch);
    }

    /**
     * Retrieves a Subscription resource.
     *
     * @param string $id              Subscription identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\SubscriptionOption[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiSubscriptionsOptionsGetSubresourceSubscriptionSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiSubscriptionsOptionsGetSubresourceSubscriptionSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves a Subscription resource.
     *
     * @param string $id    Subscription identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Organization|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiSubscriptionsOrganizationGetSubresourceSubscriptionSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiSubscriptionsOrganizationGetSubresourceSubscriptionSubresource($id), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Token|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCredentialsItem(?Model\Credentials $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostCredentialsItem($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function putAuthenticationToken(?\stdClass $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PutAuthenticationToken($requestBody), $fetch);
    }

    /**
     * Removes the UserAuthorization resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeleteUserAuthorizationItemNotFoundException
     */
    public function deleteUserAuthorizationItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeleteUserAuthorizationItem($id), $fetch);
    }

    /**
     * Retrieves a UserAuthorization resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\UserAuthorization|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetUserAuthorizationItemNotFoundException
     */
    public function getUserAuthorizationItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetUserAuthorizationItem($id), $fetch);
    }

    /**
     * Updates the UserAuthorization resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\UserAuthorization|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PatchUserAuthorizationItemBadRequestException
     * @throws \Gyroscops\Api\Exception\PatchUserAuthorizationItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\PatchUserAuthorizationItemNotFoundException
     */
    public function patchUserAuthorizationItem(string $id, ?Model\UserAuthorization $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PatchUserAuthorizationItem($id, $requestBody), $fetch);
    }

    /**
     * Replaces the UserAuthorization resource.
     *
     * @param string                                                                                   $id          Resource identifier
     * @param \Gyroscops\Api\Model\UserAuthorizationJsonld|\Gyroscops\Api\Model\UserAuthorization|null $requestBody
     * @param string                                                                                   $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\UserAuthorization|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PutUserAuthorizationItemBadRequestException
     * @throws \Gyroscops\Api\Exception\PutUserAuthorizationItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\PutUserAuthorizationItemNotFoundException
     */
    public function putUserAuthorizationItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PutUserAuthorizationItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves the collection of UserAuthorization resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\UserAuthorization[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getUserAuthorizationCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetUserAuthorizationCollection($queryParameters), $fetch);
    }

    /**
     * Creates a UserAuthorization resource.
     *
     * @param \Gyroscops\Api\Model\UserAuthorizationJsonld|\Gyroscops\Api\Model\UserAuthorization|null $requestBody
     * @param string                                                                                   $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\UserAuthorization|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostUserAuthorizationCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostUserAuthorizationCollectionUnprocessableEntityException
     */
    public function postUserAuthorizationCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostUserAuthorizationCollection($requestBody), $fetch);
    }

    /**
     * Removes the User resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeleteUserItemNotFoundException
     */
    public function deleteUserItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeleteUserItem($id), $fetch);
    }

    /**
     * Retrieves a User resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetUserItemNotFoundException
     */
    public function getUserItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetUserItem($id), $fetch);
    }

    /**
     * Updates the User resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PatchUserItemBadRequestException
     * @throws \Gyroscops\Api\Exception\PatchUserItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\PatchUserItemNotFoundException
     */
    public function patchUserItem(string $id, ?Model\User $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PatchUserItem($id, $requestBody), $fetch);
    }

    /**
     * Replaces the User resource.
     *
     * @param string                                                         $id          Resource identifier
     * @param \Gyroscops\Api\Model\UserJsonld|\Gyroscops\Api\Model\User|null $requestBody
     * @param string                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PutUserItemBadRequestException
     * @throws \Gyroscops\Api\Exception\PutUserItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\PutUserItemNotFoundException
     */
    public function putUserItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PutUserItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves a User resource.
     *
     * @param string $id              User identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\UserAuthorization[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiUsersAuthorizationsGetSubresourceUserSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiUsersAuthorizationsGetSubresourceUserSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Updates the User resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\ChangePasswordUserItemBadRequestException
     * @throws \Gyroscops\Api\Exception\ChangePasswordUserItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\ChangePasswordUserItemNotFoundException
     */
    public function changePasswordUserItem(string $id, ?Model\UserUserChangePasswordInput $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ChangePasswordUserItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves the collection of User resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getUserCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetUserCollection($queryParameters), $fetch);
    }

    /**
     * Creates a User resource.
     *
     * @param \Gyroscops\Api\Model\UserJsonld|\Gyroscops\Api\Model\User|null $requestBody
     * @param string                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostUserCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostUserCollectionUnprocessableEntityException
     */
    public function postUserCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostUserCollection($requestBody), $fetch);
    }

    /**
     * Removes the Workspace resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeleteWorkspaceItemNotFoundException
     */
    public function deleteWorkspaceItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeleteWorkspaceItem($id), $fetch);
    }

    /**
     * Retrieves a Workspace resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Workspace|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetWorkspaceItemNotFoundException
     */
    public function getWorkspaceItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetWorkspaceItem($id), $fetch);
    }

    /**
     * Updates the Workspace resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Workspace|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PatchWorkspaceItemBadRequestException
     * @throws \Gyroscops\Api\Exception\PatchWorkspaceItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\PatchWorkspaceItemNotFoundException
     */
    public function patchWorkspaceItem(string $id, ?Model\Workspace $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PatchWorkspaceItem($id, $requestBody), $fetch);
    }

    /**
     * Replaces the Workspace resource.
     *
     * @param string                                                                   $id          Resource identifier
     * @param \Gyroscops\Api\Model\WorkspaceJsonld|\Gyroscops\Api\Model\Workspace|null $requestBody
     * @param string                                                                   $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Workspace|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PutWorkspaceItemBadRequestException
     * @throws \Gyroscops\Api\Exception\PutWorkspaceItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\PutWorkspaceItemNotFoundException
     */
    public function putWorkspaceItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PutWorkspaceItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves a Workspace resource.
     *
     * @param string $id              Workspace identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\UserAuthorization[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiWorkspacesAuthorizationsGetSubresourceWorkspaceSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiWorkspacesAuthorizationsGetSubresourceWorkspaceSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves a Workspace resource.
     *
     * @param string $id              Workspace identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiWorkspacesUsersGetSubresourceWorkspaceSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiWorkspacesUsersGetSubresourceWorkspaceSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves the collection of Workspace resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Workspace[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getWorkspaceCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetWorkspaceCollection($queryParameters), $fetch);
    }

    /**
     * Creates a Workspace resource.
     *
     * @param \Gyroscops\Api\Model\WorkspaceJsonld|\Gyroscops\Api\Model\Workspace|null $requestBody
     * @param string                                                                   $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Workspace|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostWorkspaceCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostWorkspaceCollectionUnprocessableEntityException
     */
    public function postWorkspaceCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostWorkspaceCollection($requestBody), $fetch);
    }

    /**
     * Creates a Configuration resource.
     *
     * @param \Gyroscops\Api\Model\ConfigurationCreateConfigurationInputJsonld|\Gyroscops\Api\Model\ConfigurationCreateConfigurationInput|null $requestBody
     * @param string                                                                                                                           $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Configuration|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostConfigurationCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostConfigurationCollectionUnprocessableEntityException
     */
    public function postConfigurationCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostConfigurationCollection($requestBody), $fetch);
    }

    /**
     * Removes the Configuration resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeleteConfigurationItemNotFoundException
     */
    public function deleteConfigurationItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeleteConfigurationItem($id), $fetch);
    }

    /**
     * Retrieves a Configuration resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Configuration|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetConfigurationItemNotFoundException
     */
    public function getConfigurationItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetConfigurationItem($id), $fetch);
    }

    /**
     * Replaces the Configuration resource.
     *
     * @param string                                                                                   $id          Resource identifier
     * @param \Gyroscops\Api\Model\ConfigurationJsonldEdit|\Gyroscops\Api\Model\ConfigurationEdit|null $requestBody
     * @param string                                                                                   $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Configuration|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\EditConfigurationItemBadRequestException
     * @throws \Gyroscops\Api\Exception\EditConfigurationItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\EditConfigurationItemNotFoundException
     */
    public function editConfigurationItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\EditConfigurationItem($id, $requestBody), $fetch);
    }

    /**
     * Change the configuration values inside an existing configurations storage.
     *
     * @param string                                                                                                                                     $id          Resource identifier
     * @param \Gyroscops\Api\Model\ConfigurationChangeConfigurationValueInputJsonld|\Gyroscops\Api\Model\ConfigurationChangeConfigurationValueInput|null $requestBody
     * @param string                                                                                                                                     $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Configuration|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\ChangeValuesConfigurationItemBadRequestException
     * @throws \Gyroscops\Api\Exception\ChangeValuesConfigurationItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\ChangeValuesConfigurationItemNotFoundException
     */
    public function changeValuesConfigurationItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ChangeValuesConfigurationItem($id, $requestBody), $fetch);
    }

    /**
     * Remove some configuration values inside an existing configurations storage.
     *
     * @param string                                                                                                                                     $id          Resource identifier
     * @param \Gyroscops\Api\Model\ConfigurationRemoveConfigurationValueInputJsonld|\Gyroscops\Api\Model\ConfigurationRemoveConfigurationValueInput|null $requestBody
     * @param string                                                                                                                                     $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Configuration|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\RemoveValuesConfigurationItemBadRequestException
     * @throws \Gyroscops\Api\Exception\RemoveValuesConfigurationItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\RemoveValuesConfigurationItemNotFoundException
     */
    public function removeValuesConfigurationItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\RemoveValuesConfigurationItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves the collection of Configuration resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Configuration[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getConfigurationCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetConfigurationCollection($queryParameters), $fetch);
    }

    /**
     * Creates a Environment resource.
     *
     * @param \Gyroscops\Api\Model\EnvironmentCreateEnvironmentInputJsonld|\Gyroscops\Api\Model\EnvironmentCreateEnvironmentInput|null $requestBody
     * @param string                                                                                                                   $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\EnvironmentRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostEnvironmentCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostEnvironmentCollectionUnprocessableEntityException
     */
    public function postEnvironmentCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostEnvironmentCollection($requestBody), $fetch);
    }

    /**
     * Removes the Environment resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeleteEnvironmentItemNotFoundException
     */
    public function deleteEnvironmentItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeleteEnvironmentItem($id), $fetch);
    }

    /**
     * Retrieves a Environment resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\EnvironmentRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetEnvironmentItemNotFoundException
     */
    public function getEnvironmentItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetEnvironmentItem($id), $fetch);
    }

    /**
     * Replaces the Environment resource.
     *
     * @param string                                                                                 $id          Resource identifier
     * @param \Gyroscops\Api\Model\EnvironmentJsonldWrite|\Gyroscops\Api\Model\EnvironmentWrite|null $requestBody
     * @param string                                                                                 $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\EnvironmentRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\EditEnvironmentItemBadRequestException
     * @throws \Gyroscops\Api\Exception\EditEnvironmentItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\EditEnvironmentItemNotFoundException
     */
    public function editEnvironmentItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\EditEnvironmentItem($id, $requestBody), $fetch);
    }

    /**
     * Add variables from an existing configuration storage.
     *
     * @param string                                                                                                                                                         $configuration Configuration identifier
     * @param string                                                                                                                                                         $id            Resource identifier
     * @param \Gyroscops\Api\Model\EnvironmentAddMultipleVariableFromConfigurationInputJsonld|\Gyroscops\Api\Model\EnvironmentAddMultipleVariableFromConfigurationInput|null $requestBody
     * @param string                                                                                                                                                         $fetch         Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\EnvironmentRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\AddVariablesFromConfigurationEnvironmentItemBadRequestException
     * @throws \Gyroscops\Api\Exception\AddVariablesFromConfigurationEnvironmentItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\AddVariablesFromConfigurationEnvironmentItemNotFoundException
     */
    public function addVariablesFromConfigurationEnvironmentItem(string $configuration, string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\AddVariablesFromConfigurationEnvironmentItem($configuration, $id, $requestBody), $fetch);
    }

    /**
     * Add variables with a constant value.
     *
     * @param string                                                                                                                                               $id          Resource identifier
     * @param \Gyroscops\Api\Model\EnvironmentAddMultipleVariableFromConstantInputJsonld|\Gyroscops\Api\Model\EnvironmentAddMultipleVariableFromConstantInput|null $requestBody
     * @param string                                                                                                                                               $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\EnvironmentRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\AddVariablesFromConstantEnvironmentItemBadRequestException
     * @throws \Gyroscops\Api\Exception\AddVariablesFromConstantEnvironmentItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\AddVariablesFromConstantEnvironmentItemNotFoundException
     */
    public function addVariablesFromConstantEnvironmentItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\AddVariablesFromConstantEnvironmentItem($id, $requestBody), $fetch);
    }

    /**
     * Add variables from an existing secret storage.
     *
     * @param string                                                                                                                                           $secret      Secret identifier
     * @param string                                                                                                                                           $id          Resource identifier
     * @param \Gyroscops\Api\Model\EnvironmentAddMultipleVariableFromSecretInputJsonld|\Gyroscops\Api\Model\EnvironmentAddMultipleVariableFromSecretInput|null $requestBody
     * @param string                                                                                                                                           $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\EnvironmentRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\AddVariablesFromSecretEnvironmentItemBadRequestException
     * @throws \Gyroscops\Api\Exception\AddVariablesFromSecretEnvironmentItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\AddVariablesFromSecretEnvironmentItemNotFoundException
     */
    public function addVariablesFromSecretEnvironmentItem(string $secret, string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\AddVariablesFromSecretEnvironmentItem($secret, $id, $requestBody), $fetch);
    }

    /**
     * Retrieves the collection of Environment resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\EnvironmentRead[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getEnvironmentCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetEnvironmentCollection($queryParameters), $fetch);
    }

    /**
     * Retrieves a Environment resource.
     *
     * @param string $id              Environment identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\VariableRead[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiEnvironmentsVariablesGetSubresourceEnvironmentSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiEnvironmentsVariablesGetSubresourceEnvironmentSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Creates a Secret resource.
     *
     * @param \Gyroscops\Api\Model\SecretCreateSecretInputJsonld|\Gyroscops\Api\Model\SecretCreateSecretInput|null $requestBody
     * @param string                                                                                               $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Secret|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostSecretCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostSecretCollectionUnprocessableEntityException
     */
    public function postSecretCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostSecretCollection($requestBody), $fetch);
    }

    /**
     * Removes the Secret resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeleteSecretItemNotFoundException
     */
    public function deleteSecretItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeleteSecretItem($id), $fetch);
    }

    /**
     * Retrieves a Secret resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Secret|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetSecretItemNotFoundException
     */
    public function getSecretItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetSecretItem($id), $fetch);
    }

    /**
     * Replaces the Secret resource.
     *
     * @param string                                                                     $id          Resource identifier
     * @param \Gyroscops\Api\Model\SecretJsonldEdit|\Gyroscops\Api\Model\SecretEdit|null $requestBody
     * @param string                                                                     $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Secret|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\EditSecretItemBadRequestException
     * @throws \Gyroscops\Api\Exception\EditSecretItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\EditSecretItemNotFoundException
     */
    public function editSecretItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\EditSecretItem($id, $requestBody), $fetch);
    }

    /**
     * Change the secret values values inside an existing secrets storage.
     *
     * @param string                                                                                                         $id          Resource identifier
     * @param \Gyroscops\Api\Model\SecretChangeSecretValueInputJsonld|\Gyroscops\Api\Model\SecretChangeSecretValueInput|null $requestBody
     * @param string                                                                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Secret|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\ChangeValuesSecretItemBadRequestException
     * @throws \Gyroscops\Api\Exception\ChangeValuesSecretItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\ChangeValuesSecretItemNotFoundException
     */
    public function changeValuesSecretItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ChangeValuesSecretItem($id, $requestBody), $fetch);
    }

    /**
     * Remove some secret values inside an existing secrets storage.
     *
     * @param string                                                                                                         $id          Resource identifier
     * @param \Gyroscops\Api\Model\SecretRemoveSecretValueInputJsonld|\Gyroscops\Api\Model\SecretRemoveSecretValueInput|null $requestBody
     * @param string                                                                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Secret|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\RemoveValuesSecretItemBadRequestException
     * @throws \Gyroscops\Api\Exception\RemoveValuesSecretItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\RemoveValuesSecretItemNotFoundException
     */
    public function removeValuesSecretItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\RemoveValuesSecretItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves the collection of Secret resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Secret[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSecretCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetSecretCollection($queryParameters), $fetch);
    }

    /**
     * Removes the VariableFromConfiguration resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeleteVariableFromConfigurationItemNotFoundException
     */
    public function deleteVariableFromConfigurationItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeleteVariableFromConfigurationItem($id), $fetch);
    }

    /**
     * Retrieves a VariableFromConfiguration resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\VariableFromConfigurationRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetVariableFromConfigurationItemNotFoundException
     */
    public function getVariableFromConfigurationItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetVariableFromConfigurationItem($id), $fetch);
    }

    /**
     * Replaces the VariableFromConfiguration resource.
     *
     * @param string                                                                   $id          Resource identifier
     * @param \Gyroscops\Api\Model\VariableFromConfigurationJsonldWrite|\stdClass|null $requestBody
     * @param string                                                                   $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\VariableFromConfigurationRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\EditVariableFromConfigurationItemBadRequestException
     * @throws \Gyroscops\Api\Exception\EditVariableFromConfigurationItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\EditVariableFromConfigurationItemNotFoundException
     */
    public function editVariableFromConfigurationItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\EditVariableFromConfigurationItem($id, $requestBody), $fetch);
    }

    /**
     * Creates a AkeneoInstance resource.
     *
     * @param \Gyroscops\Api\Model\AkeneoInstanceAkeneoInstanceInputJsonld|\Gyroscops\Api\Model\AkeneoInstanceAkeneoInstanceInput|null $requestBody
     * @param string                                                                                                                   $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\AkeneoInstance|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostAkeneoInstanceCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostAkeneoInstanceCollectionUnprocessableEntityException
     */
    public function postAkeneoInstanceCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostAkeneoInstanceCollection($requestBody), $fetch);
    }

    /**
     * Check if an organization exists in the database.
     *
     * @param array $queryParameters {
     *
     *     @var string $url
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\AkeneoInstance[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAkeneoInstanceByPimUrlAkeneoInstanceCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetAkeneoInstanceByPimUrlAkeneoInstanceCollection($queryParameters), $fetch);
    }

    /**
     * Check if an organization exists in the database.
     *
     * @param array $queryParameters {
     *
     *     @var string $url
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\AkeneoInstance[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAkeneoInstanceOauthAkeneoInstanceCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetAkeneoInstanceOauthAkeneoInstanceCollection($queryParameters), $fetch);
    }

    /**
     * Retrieves a AkeneoInstance resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\AkeneoInstance|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetAkeneoInstanceItemNotFoundException
     */
    public function getAkeneoInstanceItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetAkeneoInstanceItem($id), $fetch);
    }

    /**
     * Retrieves the collection of AkeneoInstance resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\AkeneoInstance[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAkeneoInstanceCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetAkeneoInstanceCollection($queryParameters), $fetch);
    }

    /**
     * Creates a AkeneoLinkedAccount resource.
     *
     * @param \Gyroscops\Api\Model\AkeneoLinkedAccountAkeneoLinkedAccountsInputJsonld|\Gyroscops\Api\Model\AkeneoLinkedAccountAkeneoLinkedAccountsInput|null $requestBody
     * @param string                                                                                                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\AkeneoLinkedAccount|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostAkeneoLinkedAccountCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostAkeneoLinkedAccountCollectionUnprocessableEntityException
     */
    public function postAkeneoLinkedAccountCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostAkeneoLinkedAccountCollection($requestBody), $fetch);
    }

    /**
     * Check if an akeneo user exists in the database.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\AkeneoLinkedAccount[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAkeneoLinkedAccountAkeneoLinkedAccountCollection(string $akeneoUserId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetAkeneoLinkedAccountAkeneoLinkedAccountCollection($akeneoUserId, $queryParameters), $fetch);
    }

    /**
     * Retrieves a AkeneoLinkedAccount resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\AkeneoLinkedAccount|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetAkeneoLinkedAccountItemNotFoundException
     */
    public function getAkeneoLinkedAccountItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetAkeneoLinkedAccountItem($id), $fetch);
    }

    /**
     * Retrieves the collection of AkeneoLinkedAccount resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\AkeneoLinkedAccount[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAkeneoLinkedAccountCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetAkeneoLinkedAccountCollection($queryParameters), $fetch);
    }

    /**
     * Generate an Akeneo OAuth state.
     *
     * @param \Gyroscops\Api\Model\AkeneoOauthTokenOauthStateInputJsonld|\Gyroscops\Api\Model\AkeneoOauthTokenOauthStateInput|null $requestBody
     * @param string                                                                                                               $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostAkeneoOauthTokenCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostAkeneoOauthTokenCollectionUnprocessableEntityException
     */
    public function postAkeneoOauthTokenCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostAkeneoOauthTokenCollection($requestBody), $fetch);
    }

    /**
     * Retrieves a AkeneoOauthToken resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\AkeneoOauthTokenRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetAkeneoOauthTokenItemNotFoundException
     */
    public function getAkeneoOauthTokenItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetAkeneoOauthTokenItem($id), $fetch);
    }

    /**
     * Retrieves the collection of AkeneoOauthToken resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\AkeneoOauthTokenRead[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAkeneoOauthTokenCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetAkeneoOauthTokenCollection($queryParameters), $fetch);
    }

    /**
     * Generate an Akeneo OAuth token.
     *
     * @param \Gyroscops\Api\Model\GatewayAkeneoOauthTokenPutBody|\Gyroscops\Api\Model\AkeneoOauthTokenOauthTokenInput[]|null $requestBody
     * @param string                                                                                                          $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PutAkeneoOauthTokenAkeneoOauthTokenCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PutAkeneoOauthTokenAkeneoOauthTokenCollectionUnprocessableEntityException
     */
    public function putAkeneoOauthTokenAkeneoOauthTokenCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PutAkeneoOauthTokenAkeneoOauthTokenCollection($requestBody), $fetch);
    }

    /**
     * Removes the ReferralCode resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeleteReferralCodeItemNotFoundException
     */
    public function deleteReferralCodeItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeleteReferralCodeItem($id), $fetch);
    }

    /**
     * Retrieves a ReferralCode resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ReferralCodeReferralCodeRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetReferralCodeItemNotFoundException
     */
    public function getReferralCodeItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetReferralCodeItem($id), $fetch);
    }

    /**
     * Retrieves the collection of ReferralCode resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ReferralCodeReferralCodeRead[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getReferralCodeCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetReferralCodeCollection($queryParameters), $fetch);
    }

    /**
     * Creates a ReferralCode resource.
     *
     * @param \Gyroscops\Api\Model\ReferralCodeJsonldReferralCodeWrite|\Gyroscops\Api\Model\ReferralCodeReferralCodeWrite|null $requestBody
     * @param string                                                                                                           $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ReferralCodeReferralCodeRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostReferralCodeCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostReferralCodeCollectionUnprocessableEntityException
     */
    public function postReferralCodeCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostReferralCodeCollection($requestBody), $fetch);
    }

    /**
     * Retrieves a OnPremiseRequest resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\OnPremiseRequestOnPremiseRequestRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetOnPremiseRequestItemNotFoundException
     */
    public function getOnPremiseRequestItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetOnPremiseRequestItem($id), $fetch);
    }

    /**
     * Retrieves the collection of OnPremiseRequest resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\OnPremiseRequestOnPremiseRequestRead[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getOnPremiseRequestCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetOnPremiseRequestCollection($queryParameters), $fetch);
    }

    /**
     * Creates a OnPremiseRequest resource.
     *
     * @param \Gyroscops\Api\Model\OnPremiseRequestJsonldOnPremiseRequestWrite|\Gyroscops\Api\Model\OnPremiseRequestOnPremiseRequestWrite|null $requestBody
     * @param string                                                                                                                           $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\OnPremiseRequestOnPremiseRequestRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostOnPremiseRequestCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostOnPremiseRequestCollectionUnprocessableEntityException
     */
    public function postOnPremiseRequestCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostOnPremiseRequestCollection($requestBody), $fetch);
    }

    /**
     * Retrieves a ReferralRequest resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ReferralRequestReferralRequestRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetReferralRequestItemNotFoundException
     */
    public function getReferralRequestItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetReferralRequestItem($id), $fetch);
    }

    /**
     * Accepts a referral request.
     *
     * @param string $id          Resource identifier
     * @param null   $requestBody
     * @param string $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ReferralRequestReferralRequestRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\AcceptReferralRequestReferralRequestItemBadRequestException
     * @throws \Gyroscops\Api\Exception\AcceptReferralRequestReferralRequestItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\AcceptReferralRequestReferralRequestItemNotFoundException
     */
    public function acceptReferralRequestReferralRequestItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\AcceptReferralRequestReferralRequestItem($id, $requestBody), $fetch);
    }

    /**
     * Rejects a referral request.
     *
     * @param string $id          Resource identifier
     * @param null   $requestBody
     * @param string $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ReferralRequestReferralRequestRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\RejectReferralRequestReferralRequestItemBadRequestException
     * @throws \Gyroscops\Api\Exception\RejectReferralRequestReferralRequestItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\RejectReferralRequestReferralRequestItemNotFoundException
     */
    public function rejectReferralRequestReferralRequestItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\RejectReferralRequestReferralRequestItem($id, $requestBody), $fetch);
    }

    /**
     * Creates a ReferralRequest resource.
     *
     * @param \Gyroscops\Api\Model\ReferralRequestReferralRequestInputJsonld|\Gyroscops\Api\Model\ReferralRequestReferralRequestInput|null $requestBody
     * @param string                                                                                                                       $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ReferralRequestReferralRequestRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostReferralRequestCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostReferralRequestCollectionUnprocessableEntityException
     */
    public function postReferralRequestCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostReferralRequestCollection($requestBody), $fetch);
    }

    /**
     * Retrieves the collection of ReferralRequest resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ReferralRequestReferralRequestRead[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getReferralRequestCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetReferralRequestCollection($queryParameters), $fetch);
    }

    /**
     * Retrieves a Action resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ActionRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetActionItemNotFoundException
     */
    public function getActionItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetActionItem($id), $fetch);
    }

    /**
     * Retrieves a Action resource.
     *
     * @param string $id    Action identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Organization|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiActionsOrganizationGetSubresourceActionSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiActionsOrganizationGetSubresourceActionSubresource($id), $fetch);
    }

    /**
     * Retrieves a Action resource.
     *
     * @param string $id    Action identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiActionsOwnerGetSubresourceActionSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiActionsOwnerGetSubresourceActionSubresource($id), $fetch);
    }

    /**
     * Retrieves a Action resource.
     *
     * @param string $id    Action identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Workspace|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiActionsWorkspaceGetSubresourceActionSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiActionsWorkspaceGetSubresourceActionSubresource($id), $fetch);
    }

    /**
     * Retrieves the collection of Action resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ActionRead[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getActionCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetActionCollection($queryParameters), $fetch);
    }

    /**
     * Creates a pipeline compilation.
     *
     * @param \Gyroscops\Api\Model\CompilationCompilePipelineCommandInputJsonld|\stdClass|null $requestBody
     * @param string                                                                           $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\CompilationCompilePipelineCommand|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostCompilationCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostCompilationCollectionUnprocessableEntityException
     */
    public function postCompilationCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostCompilationCollection($requestBody), $fetch);
    }

    /**
     * Retrieves a Compilation resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Compilation|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetCompilationItemNotFoundException
     */
    public function getCompilationItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetCompilationItem($id), $fetch);
    }

    /**
     * Retrieves a Compilation resource.
     *
     * @param string $id    Compilation identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Organization|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiCompilationsOrganizationGetSubresourceCompilationSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiCompilationsOrganizationGetSubresourceCompilationSubresource($id), $fetch);
    }

    /**
     * Retrieves a Compilation resource.
     *
     * @param string $id    Compilation identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiCompilationsUserGetSubresourceCompilationSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiCompilationsUserGetSubresourceCompilationSubresource($id), $fetch);
    }

    /**
     * Retrieves a Compilation resource.
     *
     * @param string $id    Compilation identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Workspace|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiCompilationsWorkspaceGetSubresourceCompilationSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiCompilationsWorkspaceGetSubresourceCompilationSubresource($id), $fetch);
    }

    /**
     * Retrieves the collection of Compilation resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Compilation[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCompilationCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetCompilationCollection($queryParameters), $fetch);
    }

    /**
     * Declares a pipeline execution.
     *
     * @param \Gyroscops\Api\Model\ExecutionDeclarePipelineExecutionCommandInputJsonld|\Gyroscops\Api\Model\ExecutionDeclarePipelineExecutionCommandInput|null $requestBody
     * @param string                                                                                                                                           $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeclareExecutionExecutionCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\DeclareExecutionExecutionCollectionUnprocessableEntityException
     */
    public function declareExecutionExecutionCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeclareExecutionExecutionCollection($requestBody), $fetch);
    }

    /**
     * Retrieves a ExecutionPipelineJob resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionPipelineJob|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetExecutionPipelineJobItemNotFoundException
     */
    public function getExecutionPipelineJobItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetExecutionPipelineJobItem($id), $fetch);
    }

    /**
     * Retrieves a ExecutionPipelineJob resource.
     *
     * @param string $id              ExecutionPipelineJob identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionPipelineStep[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionPipelineJobsStepsGetSubresourceExecutionPipelineJobSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionPipelineJobsStepsGetSubresourceExecutionPipelineJobSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves the collection of ExecutionPipelineJob resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionPipelineJob[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getExecutionPipelineJobCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetExecutionPipelineJobCollection($queryParameters), $fetch);
    }

    /**
     * Retrieves a ExecutionAction resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionAction|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetExecutionActionItemNotFoundException
     */
    public function getExecutionActionItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetExecutionActionItem($id), $fetch);
    }

    /**
     * Retrieves a ExecutionPipeline resource.
     *
     * @param string $id              ExecutionPipeline identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionPipelineStep[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionPipelinesStepsGetSubresourceExecutionPipelineSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionPipelinesStepsGetSubresourceExecutionPipelineSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves the collection of ExecutionPipeline resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionPipeline[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getExecutionPipelineCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetExecutionPipelineCollection($queryParameters), $fetch);
    }

    /**
     * Retrieves a ExecutionWorkflow resource.
     *
     * @param string $id    ExecutionWorkflow identifier
     * @param string $jobs  ExecutionWorkflowJob identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionWorkflowJobAction|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionWorkflowsJobsActionGetSubresourceExecutionWorkflowSubresource(string $id, string $jobs, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionWorkflowsJobsActionGetSubresourceExecutionWorkflowSubresource($id, $jobs), $fetch);
    }

    /**
     * Retrieves a ExecutionWorkflow resource.
     *
     * @param string $id    ExecutionWorkflow identifier
     * @param string $jobs  ExecutionWorkflowJob identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionPipelineJob|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionWorkflowsJobsPipelineGetSubresourceExecutionWorkflowSubresource(string $id, string $jobs, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionWorkflowsJobsPipelineGetSubresourceExecutionWorkflowSubresource($id, $jobs), $fetch);
    }

    /**
     * Retrieves a ExecutionWorkflow resource.
     *
     * @param string $id              ExecutionWorkflow identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionWorkflowJob[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionWorkflowsJobsGetSubresourceExecutionWorkflowSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionWorkflowsJobsGetSubresourceExecutionWorkflowSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves the collection of ExecutionWorkflow resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionWorkflow[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getExecutionWorkflowCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetExecutionWorkflowCollection($queryParameters), $fetch);
    }

    /**
     * Retrieves a ExecutionPipelineStep resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionPipelineStep|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetExecutionPipelineStepItemNotFoundException
     */
    public function getExecutionPipelineStepItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetExecutionPipelineStepItem($id), $fetch);
    }

    /**
     * Retrieves a ExecutionPipeline resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionPipeline|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetExecutionPipelineItemNotFoundException
     */
    public function getExecutionPipelineItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetExecutionPipelineItem($id), $fetch);
    }

    /**
     * Retrieves a ExecutionWorkflowJobAction resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionWorkflowJobAction|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetExecutionWorkflowJobActionItemNotFoundException
     */
    public function getExecutionWorkflowJobActionItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetExecutionWorkflowJobActionItem($id), $fetch);
    }

    /**
     * Retrieves a ExecutionWorkflowJob resource.
     *
     * @param string $id    ExecutionWorkflowJob identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionWorkflowJobAction|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionWorkflowJobsActionGetSubresourceExecutionWorkflowJobSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionWorkflowJobsActionGetSubresourceExecutionWorkflowJobSubresource($id), $fetch);
    }

    /**
     * Retrieves a ExecutionWorkflowJob resource.
     *
     * @param string $id    ExecutionWorkflowJob identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionPipelineJob|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionWorkflowJobsPipelineGetSubresourceExecutionWorkflowJobSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionWorkflowJobsPipelineGetSubresourceExecutionWorkflowJobSubresource($id), $fetch);
    }

    /**
     * Retrieves a ExecutionWorkflowJob resource.
     *
     * @param string $id              ExecutionWorkflowJob identifier
     * @param string $pipeline        ExecutionPipelineJob identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionPipelineStep[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionWorkflowJobsPipelineStepsGetSubresourceExecutionWorkflowJobSubresource(string $id, string $pipeline, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionWorkflowJobsPipelineStepsGetSubresourceExecutionWorkflowJobSubresource($id, $pipeline, $queryParameters), $fetch);
    }

    /**
     * Retrieves the collection of ExecutionWorkflowJob resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionWorkflowJob[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getExecutionWorkflowJobCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetExecutionWorkflowJobCollection($queryParameters), $fetch);
    }

    /**
     * Retrieves a ExecutionWorkflowJob resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionWorkflowJob|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetExecutionWorkflowJobItemNotFoundException
     */
    public function getExecutionWorkflowJobItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetExecutionWorkflowJobItem($id), $fetch);
    }

    /**
     * Retrieves a ExecutionWorkflow resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionWorkflow|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetExecutionWorkflowItemNotFoundException
     */
    public function getExecutionWorkflowItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetExecutionWorkflowItem($id), $fetch);
    }

    /**
     * Retrieves a Execution resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetExecutionItemNotFoundException
     */
    public function getExecutionItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetExecutionItem($id), $fetch);
    }

    /**
     * Retrieves a Execution resource.
     *
     * @param string $id    Execution identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionAction|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionsActionGetSubresourceExecutionSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionsActionGetSubresourceExecutionSubresource($id), $fetch);
    }

    /**
     * Finishes a pipeline execution.
     *
     * @param string                                                                                 $id          Resource identifier
     * @param \Gyroscops\Api\Model\ExecutionFinishPipelineExecutionCommandInputJsonld|\stdClass|null $requestBody
     * @param string                                                                                 $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\FinishExecutionExecutionItemBadRequestException
     * @throws \Gyroscops\Api\Exception\FinishExecutionExecutionItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\FinishExecutionExecutionItemNotFoundException
     */
    public function finishExecutionExecutionItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\FinishExecutionExecutionItem($id, $requestBody), $fetch);
    }

    /**
     * Interrupts a pipeline execution.
     *
     * @param string                                                                                    $id          Resource identifier
     * @param \Gyroscops\Api\Model\ExecutionInterruptPipelineExecutionCommandInputJsonld|\stdClass|null $requestBody
     * @param string                                                                                    $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\InterruptExecutionExecutionItemBadRequestException
     * @throws \Gyroscops\Api\Exception\InterruptExecutionExecutionItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\InterruptExecutionExecutionItemNotFoundException
     */
    public function interruptExecutionExecutionItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\InterruptExecutionExecutionItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves a Execution resource.
     *
     * @param string $id    Execution identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Organization|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionsOrganizationGetSubresourceExecutionSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionsOrganizationGetSubresourceExecutionSubresource($id), $fetch);
    }

    /**
     * Retrieves a Execution resource.
     *
     * @param string $id    Execution identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionsOwnerGetSubresourceExecutionSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionsOwnerGetSubresourceExecutionSubresource($id), $fetch);
    }

    /**
     * Retrieves a Execution resource.
     *
     * @param string $id    Execution identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionPipeline|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionsPipelineGetSubresourceExecutionSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionsPipelineGetSubresourceExecutionSubresource($id), $fetch);
    }

    /**
     * Resumes a pipeline execution.
     *
     * @param string                                                                                 $id          Resource identifier
     * @param \Gyroscops\Api\Model\ExecutionResumePipelineExecutionCommandInputJsonld|\stdClass|null $requestBody
     * @param string                                                                                 $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\ResumeExecutionExecutionItemBadRequestException
     * @throws \Gyroscops\Api\Exception\ResumeExecutionExecutionItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\ResumeExecutionExecutionItemNotFoundException
     */
    public function resumeExecutionExecutionItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ResumeExecutionExecutionItem($id, $requestBody), $fetch);
    }

    /**
     * Starts a pipeline execution.
     *
     * @param string                                                                                $id          Resource identifier
     * @param \Gyroscops\Api\Model\ExecutionStartPipelineExecutionCommandInputJsonld|\stdClass|null $requestBody
     * @param string                                                                                $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\StartExecutionExecutionItemBadRequestException
     * @throws \Gyroscops\Api\Exception\StartExecutionExecutionItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\StartExecutionExecutionItemNotFoundException
     */
    public function startExecutionExecutionItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\StartExecutionExecutionItem($id, $requestBody), $fetch);
    }

    /**
     * Terminates a pipeline execution.
     *
     * @param string                                                                                                                                               $id          Resource identifier
     * @param \Gyroscops\Api\Model\ExecutionTerminatePipelineExecutionCommandInputJsonld|\Gyroscops\Api\Model\ExecutionTerminatePipelineExecutionCommandInput|null $requestBody
     * @param string                                                                                                                                               $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\TerminateExecutionExecutionItemBadRequestException
     * @throws \Gyroscops\Api\Exception\TerminateExecutionExecutionItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\TerminateExecutionExecutionItemNotFoundException
     */
    public function terminateExecutionExecutionItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\TerminateExecutionExecutionItem($id, $requestBody), $fetch);
    }

    /**
     * Updates a pipeline execution state.
     *
     * @param string                                                                                                                                                   $id          Resource identifier
     * @param \Gyroscops\Api\Model\ExecutionUpdatePipelineExecutionStateCommandInputJsonld|\Gyroscops\Api\Model\ExecutionUpdatePipelineExecutionStateCommandInput|null $requestBody
     * @param string                                                                                                                                                   $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\UpdateExecutionStateExecutionItemBadRequestException
     * @throws \Gyroscops\Api\Exception\UpdateExecutionStateExecutionItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\UpdateExecutionStateExecutionItemNotFoundException
     */
    public function updateExecutionStateExecutionItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\UpdateExecutionStateExecutionItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves a Execution resource.
     *
     * @param string $id    Execution identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionWorkflow|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionsWorkflowGetSubresourceExecutionSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionsWorkflowGetSubresourceExecutionSubresource($id), $fetch);
    }

    /**
     * Retrieves a Execution resource.
     *
     * @param string $id              Execution identifier
     * @param string $workflow        ExecutionWorkflow identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionWorkflowJob[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionsWorkflowJobsGetSubresourceExecutionSubresource(string $id, string $workflow, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionsWorkflowJobsGetSubresourceExecutionSubresource($id, $workflow, $queryParameters), $fetch);
    }

    /**
     * Retrieves a Execution resource.
     *
     * @param string $id    Execution identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Workspace|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiExecutionsWorkspaceGetSubresourceExecutionSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiExecutionsWorkspaceGetSubresourceExecutionSubresource($id), $fetch);
    }

    /**
     * Retrieves the collection of Execution resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionRead[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getExecutionCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetExecutionCollection($queryParameters), $fetch);
    }

    /**
     * Declares a docker pipeline.
     *
     * @param \Gyroscops\Api\Model\PipelineDeclarePipelineCommandInputJsonld|\Gyroscops\Api\Model\PipelineDeclarePipelineCommandInput|null $requestBody
     * @param string                                                                                                                       $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeclarePipelinePipelineCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\DeclarePipelinePipelineCollectionUnprocessableEntityException
     */
    public function declarePipelinePipelineCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeclarePipelinePipelineCollection($requestBody), $fetch);
    }

    /**
     * Retrieves the collection of PipelineStepProbe resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\PipelineStepProbe[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPipelineStepProbeCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetPipelineStepProbeCollection($queryParameters), $fetch);
    }

    /**
     * Retrieves a PipelineStepProbe resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\PipelineStepProbe|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetPipelineStepProbeItemNotFoundException
     */
    public function getPipelineStepProbeItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetPipelineStepProbeItem($id), $fetch);
    }

    /**
     * Retrieves a PipelineStep resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\PipelineStep|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetPipelineStepItemNotFoundException
     */
    public function getPipelineStepItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetPipelineStepItem($id), $fetch);
    }

    /**
     * Retrieves a PipelineStep resource.
     *
     * @param string $id              PipelineStep identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\PipelineStepProbe[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiPipelineStepsProbesGetSubresourcePipelineStepSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiPipelineStepsProbesGetSubresourcePipelineStepSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves the collection of PipelineStep resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\PipelineStep[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPipelineStepCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetPipelineStepCollection($queryParameters), $fetch);
    }

    /**
     * Deletes a pipeline.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeletePipelinePipelineItemNotFoundException
     */
    public function deletePipelinePipelineItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeletePipelinePipelineItem($id), $fetch);
    }

    /**
     * Retrieves a Pipeline resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\PipelineRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetPipelineItemNotFoundException
     */
    public function getPipelineItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetPipelineItem($id), $fetch);
    }

    /**
     * Adds a composer auth to a pipeline.
     *
     * @param string                                                                                                                                       $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineAddPipelineComposerAuthCommandInputJsonld|\Gyroscops\Api\Model\PipelineAddPipelineComposerAuthCommandInput|null $requestBody
     * @param string                                                                                                                                       $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\AddComposerAuthPipelinePipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\AddComposerAuthPipelinePipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\AddComposerAuthPipelinePipelineItemNotFoundException
     */
    public function addComposerAuthPipelinePipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\AddComposerAuthPipelinePipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Adds PSR4 autoload composer to a pipeline.
     *
     * @param string                                                                                                                                                       $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineAddPipelineComposerPSR4AutoloadCommandInputJsonld|\Gyroscops\Api\Model\PipelineAddPipelineComposerPSR4AutoloadCommandInput|null $requestBody
     * @param string                                                                                                                                                       $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\AddComposerAutoloadPipelinePipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\AddComposerAutoloadPipelinePipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\AddComposerAutoloadPipelinePipelineItemNotFoundException
     */
    public function addComposerAutoloadPipelinePipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\AddComposerAutoloadPipelinePipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Adds a composer package to a pipeline.
     *
     * @param string                                                                                                                                             $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineAddPipelineComposerPackageCommandInputJsonld|\Gyroscops\Api\Model\PipelineAddPipelineComposerPackageCommandInput|null $requestBody
     * @param string                                                                                                                                             $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\AddComposerPackagePipelinePipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\AddComposerPackagePipelinePipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\AddComposerPackagePipelinePipelineItemNotFoundException
     */
    public function addComposerPackagePipelinePipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\AddComposerPackagePipelinePipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Adds a composer repository to a pipeline.
     *
     * @param string                                                                                                                                                   $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineAddPipelineComposerRepositoryCommandInputJsonld|\Gyroscops\Api\Model\PipelineAddPipelineComposerRepositoryCommandInput|null $requestBody
     * @param string                                                                                                                                                   $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\AddComposerRepositoryPipelinePipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\AddComposerRepositoryPipelinePipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\AddComposerRepositoryPipelinePipelineItemNotFoundException
     */
    public function addComposerRepositoryPipelinePipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\AddComposerRepositoryPipelinePipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves a Pipeline resource.
     *
     * @param string $id              Pipeline identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Compilation[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiPipelinesCompilationsGetSubresourcePipelineSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiPipelinesCompilationsGetSubresourcePipelineSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Launches a pipeline compilation.
     *
     * @param string                                                                        $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineCompilePipelineCommandInputJsonld|\stdClass|null $requestBody
     * @param string                                                                        $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PipelineCompilationPipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\PipelineCompilationPipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\PipelineCompilationPipelineItemNotFoundException
     */
    public function pipelineCompilationPipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PipelineCompilationPipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves a Pipeline resource.
     *
     * @param string $id    Pipeline identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Organization|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiPipelinesOrganizationGetSubresourcePipelineSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiPipelinesOrganizationGetSubresourcePipelineSubresource($id), $fetch);
    }

    /**
     * Retrieves a Pipeline resource.
     *
     * @param string $id    Pipeline identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiPipelinesOwnerGetSubresourcePipelineSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiPipelinesOwnerGetSubresourcePipelineSubresource($id), $fetch);
    }

    /**
     * Removes a composer auth from a pipeline.
     *
     * @param string                                                                                                                                             $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineRemovePipelineComposerAuthCommandInputJsonld|\Gyroscops\Api\Model\PipelineRemovePipelineComposerAuthCommandInput|null $requestBody
     * @param string                                                                                                                                             $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\RemoveComposerAuthPipelinePipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\RemoveComposerAuthPipelinePipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\RemoveComposerAuthPipelinePipelineItemNotFoundException
     */
    public function removeComposerAuthPipelinePipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\RemoveComposerAuthPipelinePipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Removes PSR4 autoload composer from a pipeline.
     *
     * @param string                                                                                                                                                             $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineRemovePipelineComposerPSR4AutoloadCommandInputJsonld|\Gyroscops\Api\Model\PipelineRemovePipelineComposerPSR4AutoloadCommandInput|null $requestBody
     * @param string                                                                                                                                                             $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\RemoveComposerAutoloadPipelinePipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\RemoveComposerAutoloadPipelinePipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\RemoveComposerAutoloadPipelinePipelineItemNotFoundException
     */
    public function removeComposerAutoloadPipelinePipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\RemoveComposerAutoloadPipelinePipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Removes a composer package from a pipeline.
     *
     * @param string                                                                                                                                                   $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineRemovePipelineComposerPackageCommandInputJsonld|\Gyroscops\Api\Model\PipelineRemovePipelineComposerPackageCommandInput|null $requestBody
     * @param string                                                                                                                                                   $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\RemoveComposerPackagePipelinePipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\RemoveComposerPackagePipelinePipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\RemoveComposerPackagePipelinePipelineItemNotFoundException
     */
    public function removeComposerPackagePipelinePipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\RemoveComposerPackagePipelinePipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Adds a repository from a pipeline.
     *
     * @param string                                                                                                                                                         $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineRemovePipelineComposerRepositoryCommandInputJsonld|\Gyroscops\Api\Model\PipelineRemovePipelineComposerRepositoryCommandInput|null $requestBody
     * @param string                                                                                                                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\RemoveComposerRepositoryPipelinePipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\RemoveComposerRepositoryPipelinePipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\RemoveComposerRepositoryPipelinePipelineItemNotFoundException
     */
    public function removeComposerRepositoryPipelinePipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\RemoveComposerRepositoryPipelinePipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Appends a step to a pipeline.
     *
     * @param string                                                                                                                             $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineAppendPipelineStepCommandInputJsonld|\Gyroscops\Api\Model\PipelineAppendPipelineStepCommandInput|null $requestBody
     * @param string                                                                                                                             $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\AppendPipelineStepPipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\AppendPipelineStepPipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\AppendPipelineStepPipelineItemNotFoundException
     */
    public function appendPipelineStepPipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\AppendPipelineStepPipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Removes a step from a pipeline.
     *
     * @param string $code  Step resource code
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeletePipelineStepPipelineItemNotFoundException
     */
    public function deletePipelineStepPipelineItem(string $code, string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeletePipelineStepPipelineItem($code, $id), $fetch);
    }

    /**
     * Adds a step after another one in a pipeline.
     *
     * @param string                                                                                                                                 $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineAddAfterPipelineStepCommandInputJsonld|\Gyroscops\Api\Model\PipelineAddAfterPipelineStepCommandInput|null $requestBody
     * @param string                                                                                                                                 $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\AddAfterPipelineStepPipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\AddAfterPipelineStepPipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\AddAfterPipelineStepPipelineItemNotFoundException
     */
    public function addAfterPipelineStepPipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\AddAfterPipelineStepPipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Adds a step before another one in a pipeline.
     *
     * @param string                                                                                                                                   $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineAddBeforePipelineStepCommandInputJsonld|\Gyroscops\Api\Model\PipelineAddBeforePipelineStepCommandInput|null $requestBody
     * @param string                                                                                                                                   $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\AddBeforePipelineStepPipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\AddBeforePipelineStepPipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\AddBeforePipelineStepPipelineItemNotFoundException
     */
    public function addBeforePipelineStepPipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\AddBeforePipelineStepPipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Moves a step after another one in a pipeline.
     *
     * @param string                                                                                                                                   $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineMoveAfterPipelineStepCommandInputJsonld|\Gyroscops\Api\Model\PipelineMoveAfterPipelineStepCommandInput|null $requestBody
     * @param string                                                                                                                                   $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\MoveAfterPipelineStepPipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\MoveAfterPipelineStepPipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\MoveAfterPipelineStepPipelineItemNotFoundException
     */
    public function moveAfterPipelineStepPipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\MoveAfterPipelineStepPipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Moves a step before another one in a pipeline.
     *
     * @param string                                                                                                                                     $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineMoveBeforePipelineStepCommandInputJsonld|\Gyroscops\Api\Model\PipelineMoveBeforePipelineStepCommandInput|null $requestBody
     * @param string                                                                                                                                     $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\MoveBeforePipelineStepPipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\MoveBeforePipelineStepPipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\MoveBeforePipelineStepPipelineItemNotFoundException
     */
    public function moveBeforePipelineStepPipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\MoveBeforePipelineStepPipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Adds a probe to a step.
     *
     * @param string                                                                                                                               $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineAddPipelineStepProbCommandInputJsonld|\Gyroscops\Api\Model\PipelineAddPipelineStepProbCommandInput|null $requestBody
     * @param string                                                                                                                               $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\AddPipelineStepProbePipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\AddPipelineStepProbePipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\AddPipelineStepProbePipelineItemNotFoundException
     */
    public function addPipelineStepProbePipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\AddPipelineStepProbePipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Removes a probe from a step.
     *
     * @param string $code      Step resource code
     * @param string $probeCode Probe resource code
     * @param string $id        Resource identifier
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\RemovePipelineStepProbePipelineItemNotFoundException
     */
    public function removePipelineStepProbePipelineItem(string $code, string $probeCode, string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\RemovePipelineStepProbePipelineItem($code, $probeCode, $id), $fetch);
    }

    /**
     * Replaces a step by another one in a pipeline.
     *
     * @param string                                                                                                                               $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineReplacePipelineStepCommandInputJsonld|\Gyroscops\Api\Model\PipelineReplacePipelineStepCommandInput|null $requestBody
     * @param string                                                                                                                               $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\ReplacePipelineStepPipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\ReplacePipelineStepPipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\ReplacePipelineStepPipelineItemNotFoundException
     */
    public function replacePipelineStepPipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ReplacePipelineStepPipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves a Pipeline resource.
     *
     * @param string $id              Pipeline identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\PipelineStep[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiPipelinesStepsGetSubresourcePipelineSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiPipelinesStepsGetSubresourcePipelineSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Reorganizes the steps of a pipeline according to a given order.
     *
     * @param string                                                                                                                                 $id          Resource identifier
     * @param \Gyroscops\Api\Model\PipelineReorderPipelineStepsCommandInputJsonld|\Gyroscops\Api\Model\PipelineReorderPipelineStepsCommandInput|null $requestBody
     * @param string                                                                                                                                 $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\ReorderPipelineStepsPipelineItemBadRequestException
     * @throws \Gyroscops\Api\Exception\ReorderPipelineStepsPipelineItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\ReorderPipelineStepsPipelineItemNotFoundException
     */
    public function reorderPipelineStepsPipelineItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ReorderPipelineStepsPipelineItem($id, $requestBody), $fetch);
    }

    /**
     * Retrieves a Pipeline resource.
     *
     * @param string $id    Pipeline identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Workspace|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiPipelinesWorkspaceGetSubresourcePipelineSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiPipelinesWorkspaceGetSubresourcePipelineSubresource($id), $fetch);
    }

    /**
     * Retrieves the collection of Pipeline resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     *     @var string $code
     *     @var array $code[]
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\PipelineRead[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPipelineCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetPipelineCollection($queryParameters), $fetch);
    }

    /**
     * In order to differentiate the different types of schedules, we have set up a field named "type" :
     * 1 => Immediate
     * 2 => Once
     * 3 => Times
     * 4 => Until.
     *
     * @param \Gyroscops\Api\Model\ScheduleDeclarePipelineScheduleCommandInputJsonld|\Gyroscops\Api\Model\ScheduleDeclarePipelineScheduleCommandInput|null $requestBody
     * @param string                                                                                                                                       $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\PostScheduleCollectionBadRequestException
     * @throws \Gyroscops\Api\Exception\PostScheduleCollectionUnprocessableEntityException
     */
    public function postScheduleCollection($requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\PostScheduleCollection($requestBody), $fetch);
    }

    /**
     * Retrieves a Schedule resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Schedule|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetScheduleItemNotFoundException
     */
    public function getScheduleItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetScheduleItem($id), $fetch);
    }

    /**
     * Retrieves a Schedule resource.
     *
     * @param string $id              Schedule identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\ExecutionRead[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiSchedulesExecutionsGetSubresourceScheduleSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiSchedulesExecutionsGetSubresourceScheduleSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves a Schedule resource.
     *
     * @param string $id    Schedule identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Organization|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiSchedulesOrganizationGetSubresourceScheduleSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiSchedulesOrganizationGetSubresourceScheduleSubresource($id), $fetch);
    }

    /**
     * Retrieves a Schedule resource.
     *
     * @param string $id    Schedule identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiSchedulesOwnerGetSubresourceScheduleSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiSchedulesOwnerGetSubresourceScheduleSubresource($id), $fetch);
    }

    /**
     * Retrieves a Schedule resource.
     *
     * @param string $id    Schedule identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\PipelineRead|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiSchedulesPipelineGetSubresourceScheduleSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiSchedulesPipelineGetSubresourceScheduleSubresource($id), $fetch);
    }

    /**
     * Retrieves a Schedule resource.
     *
     * @param string $id    Schedule identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\WorkflowRead|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiSchedulesWorkflowGetSubresourceScheduleSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiSchedulesWorkflowGetSubresourceScheduleSubresource($id), $fetch);
    }

    /**
     * Retrieves a Schedule resource.
     *
     * @param string $id              Schedule identifier
     * @param string $workflow        Workflow identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\WorkflowJobRead[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiSchedulesWorkflowJobsGetSubresourceScheduleSubresource(string $id, string $workflow, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiSchedulesWorkflowJobsGetSubresourceScheduleSubresource($id, $workflow, $queryParameters), $fetch);
    }

    /**
     * Retrieves a Schedule resource.
     *
     * @param string $id       Schedule identifier
     * @param string $workflow Workflow identifier
     * @param string $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Organization|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiSchedulesWorkflowOrganizationGetSubresourceScheduleSubresource(string $id, string $workflow, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiSchedulesWorkflowOrganizationGetSubresourceScheduleSubresource($id, $workflow), $fetch);
    }

    /**
     * Retrieves a Schedule resource.
     *
     * @param string $id       Schedule identifier
     * @param string $workflow Workflow identifier
     * @param string $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiSchedulesWorkflowOwnerGetSubresourceScheduleSubresource(string $id, string $workflow, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiSchedulesWorkflowOwnerGetSubresourceScheduleSubresource($id, $workflow), $fetch);
    }

    /**
     * Retrieves a Schedule resource.
     *
     * @param string $id       Schedule identifier
     * @param string $workflow Workflow identifier
     * @param string $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Workspace|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiSchedulesWorkflowWorkspaceGetSubresourceScheduleSubresource(string $id, string $workflow, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiSchedulesWorkflowWorkspaceGetSubresourceScheduleSubresource($id, $workflow), $fetch);
    }

    /**
     * Retrieves a Schedule resource.
     *
     * @param string $id    Schedule identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Workspace|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiSchedulesWorkspaceGetSubresourceScheduleSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiSchedulesWorkspaceGetSubresourceScheduleSubresource($id), $fetch);
    }

    /**
     * Retrieves the collection of Schedule resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Schedule[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getScheduleCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetScheduleCollection($queryParameters), $fetch);
    }

    /**
     * Retrieves a WorkflowJobAction resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\WorkflowJobAction|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetWorkflowJobActionItemNotFoundException
     */
    public function getWorkflowJobActionItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetWorkflowJobActionItem($id), $fetch);
    }

    /**
     * Retrieves a WorkflowJob resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\WorkflowJobRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetWorkflowJobItemNotFoundException
     */
    public function getWorkflowJobItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetWorkflowJobItem($id), $fetch);
    }

    /**
     * Retrieves a WorkflowJobPipeline resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\WorkflowJobPipeline|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetWorkflowJobPipelineItemNotFoundException
     */
    public function getWorkflowJobPipelineItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetWorkflowJobPipelineItem($id), $fetch);
    }

    /**
     * Retrieves the collection of WorkflowJobPipeline resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\WorkflowJobPipeline[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getWorkflowJobPipelineCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetWorkflowJobPipelineCollection($queryParameters), $fetch);
    }

    /**
     * Retrieves a WorkflowJobPipeline resource.
     *
     * @param string $id              WorkflowJobPipeline identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\PipelineStep[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiWorkflowJobPipelinesStepsGetSubresourceWorkflowJobPipelineSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiWorkflowJobPipelinesStepsGetSubresourceWorkflowJobPipelineSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves a Workflow resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\WorkflowRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetWorkflowItemNotFoundException
     */
    public function getWorkflowItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetWorkflowItem($id), $fetch);
    }

    /**
     * Retrieves a Workflow resource.
     *
     * @param string $id              Workflow identifier
     * @param array  $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\WorkflowJobRead[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiWorkflowsJobsGetSubresourceWorkflowSubresource(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiWorkflowsJobsGetSubresourceWorkflowSubresource($id, $queryParameters), $fetch);
    }

    /**
     * Retrieves a Workflow resource.
     *
     * @param string $id    Workflow identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Organization|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiWorkflowsOrganizationGetSubresourceWorkflowSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiWorkflowsOrganizationGetSubresourceWorkflowSubresource($id), $fetch);
    }

    /**
     * Retrieves a Workflow resource.
     *
     * @param string $id    Workflow identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\User|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiWorkflowsOwnerGetSubresourceWorkflowSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiWorkflowsOwnerGetSubresourceWorkflowSubresource($id), $fetch);
    }

    /**
     * Retrieves a Workflow resource.
     *
     * @param string $id    Workflow identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\Workspace|\Psr\Http\Message\ResponseInterface|null
     */
    public function apiWorkflowsWorkspaceGetSubresourceWorkflowSubresource(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\ApiWorkflowsWorkspaceGetSubresourceWorkflowSubresource($id), $fetch);
    }

    /**
     * Retrieves the collection of Workflow resources.
     *
     * @param array $queryParameters {
     *
     *     @var int $page The collection page number
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\WorkflowRead[]|\Psr\Http\Message\ResponseInterface|null
     */
    public function getWorkflowCollection(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetWorkflowCollection($queryParameters), $fetch);
    }

    /**
     * Removes the VariableFromConstant resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeleteVariableFromConstantItemNotFoundException
     */
    public function deleteVariableFromConstantItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeleteVariableFromConstantItem($id), $fetch);
    }

    /**
     * Retrieves a VariableFromConstant resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\VariableFromConstantRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetVariableFromConstantItemNotFoundException
     */
    public function getVariableFromConstantItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetVariableFromConstantItem($id), $fetch);
    }

    /**
     * Replaces the VariableFromConstant resource.
     *
     * @param string                                                              $id          Resource identifier
     * @param \Gyroscops\Api\Model\VariableFromConstantJsonldWrite|\stdClass|null $requestBody
     * @param string                                                              $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\VariableFromConstantRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\EditVariableFromConstantItemBadRequestException
     * @throws \Gyroscops\Api\Exception\EditVariableFromConstantItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\EditVariableFromConstantItemNotFoundException
     */
    public function editVariableFromConstantItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\EditVariableFromConstantItem($id, $requestBody), $fetch);
    }

    /**
     * Removes the VariableFromSecret resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\DeleteVariableFromSecretItemNotFoundException
     */
    public function deleteVariableFromSecretItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\DeleteVariableFromSecretItem($id), $fetch);
    }

    /**
     * Retrieves a VariableFromSecret resource.
     *
     * @param string $id    Resource identifier
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\VariableFromSecretRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\GetVariableFromSecretItemNotFoundException
     */
    public function getVariableFromSecretItem(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\GetVariableFromSecretItem($id), $fetch);
    }

    /**
     * Replaces the VariableFromSecret resource.
     *
     * @param string                                                            $id          Resource identifier
     * @param \Gyroscops\Api\Model\VariableFromSecretJsonldWrite|\stdClass|null $requestBody
     * @param string                                                            $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Gyroscops\Api\Model\VariableFromSecretRead|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws \Gyroscops\Api\Exception\EditVariableFromSecretItemBadRequestException
     * @throws \Gyroscops\Api\Exception\EditVariableFromSecretItemUnprocessableEntityException
     * @throws \Gyroscops\Api\Exception\EditVariableFromSecretItemNotFoundException
     */
    public function editVariableFromSecretItem(string $id, $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Gyroscops\Api\Endpoint\EditVariableFromSecretItem($id, $requestBody), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            if (\count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new \Gyroscops\Api\Normalizer\JaneObjectNormalizer()];
        if (\count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
